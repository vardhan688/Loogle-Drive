{"version":3,"sources":["components/FileRename.js","components/File.js","components/FileUpload.js","App.js","serviceWorker.js","index.js"],"names":["FileRename","state","count","clicked","newName","String","onClick","setState","onSubmit","event","target","value","className","this","class","for","id","type","placeholder","Component","File","files","map","file","name","mimetype","size","fileID","_id","fileName","FileUpload","selectedFile","onFileSelect","onFileUpload","FormData","append","axios","post","then","res","console","log","statusText","hidden","onChange","App","fetch","json","data","catch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iQAsDeA,E,4MAlCXC,MAAQ,CACJC,MAAO,EACPC,SAAS,EACTC,QAASC,Q,EAGbC,QAAU,WACN,EAAKC,SAAS,CACVL,MAAO,EAAKD,MAAMC,MAAQ,IAE1B,EAAKD,MAAMC,MAAO,IAAM,EACxB,EAAKK,SAAS,CACVJ,SAAS,IAIb,EAAKI,SAAS,CACVJ,SAAS,K,EAKrBK,SAAW,SAACC,GACR,EAAKF,SAAS,CACVH,QAASK,EAAMC,OAAOC,S,uDAvC1B,OACI,6BACI,4BAAQC,UAAU,yBAAyBN,QAAYO,KAAKP,SAA5D,UACCO,KAAKZ,MAAME,SACZ,yBAAKW,MAAM,kBACP,yBAAKA,MAAM,YACP,2BAAOC,IAAI,YAAX,YACA,2BAAOD,MAAM,eAAeE,GAAG,WAAWC,KAAK,OAAOC,YAAY,mBAClE,4BAAQN,UAAU,YAAYN,QAAWO,KAAKL,UAA9C,iB,GAVCW,a,iBCyBVC,EAxBF,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACZ,OAAS,iCAEDA,EAAMC,KAAI,SAACC,GAAD,OAAY,yBACdX,UAAY,QAChB,yBACIA,UAAY,aAChB,wBACGA,UAAY,cADf,UACsCW,EAAKC,KAD3C,KAFA,IAGyD,wBACtDZ,UAAY,iCAD0C,UACAW,EAAKE,SADL,KAHzD,IAIgF,uBAC9Eb,UAAY,aADkE,UAC5CW,EAAKG,KADuC,KAJhF,IAKsD,kBACtD,EADsD,CAC3CC,OAAWJ,EAAKK,IAC3BC,SAAaN,EAAKC,OAPlB,IAQG,kBACH,IADG,CACQG,OAAWJ,EAAKK,MAT3B,KAFkB,QAFrB,M,iBCgCEE,E,4MAtBX7B,MAAQ,CACJ8B,aAAc,M,EAGlBC,aAAe,SAAAvB,GACX,EAAKF,SAAS,CAAEwB,aAActB,EAAMC,OAAOW,MAAM,M,EAGrDY,aAAe,WACX,IAAMV,EAAO,IAAIW,SACjBX,EAAKY,OAAO,MAClB,EAAKlC,MAAM8B,aACX,EAAK9B,MAAM8B,aAAaP,MAClBY,IAAMC,KAAK,uCAAwCd,GAAMe,MACrD,SAAAC,GACIC,QAAQC,IAAIF,EAAIG,gB,uDAxBxB,OACI,yBAAK9B,UAAU,sBACX,2BAAOE,MAAM,mBAAb,SAAqC,2BAAOG,KAAK,OAAO0B,QAAM,EAACC,SAAY/B,KAAKmB,gBAEhF,4BAAQpB,UAAU,kBAAkBN,QAAWO,KAAKoB,cAApD,e,GANSd,aCyBV0B,E,4MAdX5C,MAAQ,CACJoB,MAAO,I,uDAVP,OACE,6BACE,gCAAQ,2CACR,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMA,MAAOR,KAAKZ,MAAMoB,W,0CASX,IAAD,OAChByB,MAAM,0CACDR,MAAK,SAAAC,GAAG,OAAIA,EAAIQ,UAChBT,MAAK,SAACU,GACH,EAAKzC,SAAS,CAAEc,MAAO2B,OAE1BC,MAAMT,QAAQC,S,GArBTtB,aCQE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdf,OAAM,SAAAgB,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.79f3fbf3.chunk.js","sourcesContent":["import React, { Component } from 'react'\n//import Axios from 'axios';\n\nclass FileRename extends Component {\n    render() {\n        return (\n            <div>\n                <button className=\"btn btn-default btn-sm\" onClick =  {this.onClick}>Rename</button>\n                {this.state.clicked && \n                <div class=\"form-group row\">\n                    <div class=\"col-xs-2\">\n                        <label for=\"new-name\">New Name</label>\n                        <input class=\"form-control\" id=\"new-name\" type=\"text\" placeholder=\"Enter new name\" />\n                        <button className=\"btn bt-sm\" onClick = {this.onSubmit} >Submit</button>\n                    </div>\n                </div> }\n            </div>\n        )\n    }\n\n    state = {\n        count: 0,\n        clicked: false,\n        newName: String\n    };\n\n    onClick = () => {\n        this.setState({\n            count: this.state.count + 1\n        });\n        if (this.state.count %2 !== 0){\n            this.setState({\n                clicked: true\n            });\n        }\n        else{\n            this.setState({\n                clicked: false\n            });\n        }\n    }\n\n    onSubmit = (event) => {\n        this.setState({\n            newName: event.target.value\n        });\n        /*newNameJSON = {\n            name: newName\n        }\n        Axios.put(\"http://localhost:4000/api/pdf/\"+)*/\n    }\n\n}\n\nexport default FileRename;\n","import React from 'react';\nimport FileRename from './FileRename';\nimport FileDelete from './FileDelete';\n\nconst File = ({ files }) => {\n    return ( <\n        div > {\n            files.map((file) => ( <\n                div className = \"card\" >\n                <\n                div className = \"card-body\" >\n                <\n                h5 className = \"card-title\" > Name: { file.name } < /h5> <\n                h6 className = \"card-subtitle mb-2 text-muted\" > Type: { file.mimetype } < /h6> <\n                p className = \"card-text\" > Size: { file.size } < /p> <\n                FileRename fileID = { file._id }\n                fileName = { file.name }\n                /> <\n                FileDelete fileID = { file._id }\n                /> <\n                /div> <\n                /div>\n            ))\n        } <\n        /div>\n    )\n}\n\nexport default File;","import React, { Component } from 'react';\nimport axios from 'axios';\n//import '../styles/FileUpload.css'\n\nclass FileUpload extends Component {\n    render() {\n        return (\n            <div className=\"upload-btn-wrapper\">\n                <label class=\"btn btn-default\">Browse<input type=\"file\" hidden onChange = {this.onFileSelect} />\n                </label>\n                <button className=\"btn btn-default\" onClick = {this.onFileUpload} >Upload</button>\n            </div>\n        )\n    };\n\n    state = {\n        selectedFile: null\n    }\n\n    onFileSelect = event => {\n        this.setState({ selectedFile: event.target.files[0] }); \n    }\n\n    onFileUpload = () => {\n        const file = new FormData();\n        file.append(\"pdf\", \n\t\tthis.state.selectedFile, \n\t\tthis.state.selectedFile.name);\n        axios.post('http://localhost:4000/api/pdf/upload', file).then(\n            res => {\n                console.log(res.statusText);\n            }\n        );\n    }\n\n}\n\nexport default FileUpload;\n","import React, {Component} from 'react';\nimport File from './components/File';\nimport FileUpload from './components/FileUpload';\n\nclass App extends Component {\n    render() {\n        return (\n          <div>\n            <center><h1>Files list</h1></center>\n            <FileUpload />\n            <File files={this.state.files} />\n          </div>\n        )\n    }\n\n    state = {\n        files: []\n    };\n\n    componentDidMount() {\n        fetch('http://localhost:4000/api/pdf/list-all')\n            .then(res => res.json())\n            .then((data) => {\n                this.setState({ files: data })\n            })\n            .catch(console.log)\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}